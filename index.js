/********************************************
 *  BOT PH√ÇN T√çCH CRYPTO V·ªöI T√çNH NƒÇNG L∆ØU TR·ªÆ SQL V√Ä GI·∫¢ L·∫¨P
 *  (S·ª≠ d·ª•ng LSTM v·ªõi WINDOW_SIZE, dynamic training control v√† l·ªùi khuy√™n ƒë√≤n b·∫©y)
 ********************************************/

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { RSI, SMA, MACD, BollingerBands, ADX, ATR, Stochastic, OBV, IchimokuCloud } = require('technicalindicators');
const tf = require('@tensorflow/tfjs');
const fs = require('fs');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const WebSocket = require('ws');

const wsStreams = {}; // Ch·ª©a c√°c k·∫øt n·ªëi WebSocket theo c·∫∑p & timeframe
const activeSubscriptions = {}; // ƒê·∫øm s·ªë ng∆∞·ªùi theo d√µi m·ªói c·∫∑p
const cacheKlines = new Map();

function subscribeBinance(symbol, pair, timeframe) {
    const streamKey = `${symbol.toLowerCase()}_${pair.toLowerCase()}_${timeframe}`;

    if (wsStreams[streamKey]) {
        activeSubscriptions[streamKey] = (activeSubscriptions[streamKey] || 0) + 1;
        console.log(`üì° WebSocket ${symbol}/${pair}/${timeframe} ƒëang ho·∫°t ƒë·ªông. Ng∆∞·ªùi theo d√µi: ${activeSubscriptions[streamKey]}`);
        return;
    }

    const ws = new WebSocket(`wss://stream.binance.com:9443/ws/${symbol.toLowerCase()}${pair.toLowerCase()}@kline_${timeframe}`);

    ws.on('message', (data) => {
        const json = JSON.parse(data);
        const kline = json.k;
        const newCandle = {
            timestamp: kline.t,
            open: parseFloat(kline.o),
            high: parseFloat(kline.h),
            low: parseFloat(kline.l),
            close: parseFloat(kline.c),
            volume: parseFloat(kline.v)
        };

        const cacheKey = `${symbol}_${pair}`;
        if (!cacheKlines.has(cacheKey)) {
            cacheKlines.set(cacheKey, []);
        }

        const candles = cacheKlines.get(cacheKey);
        candles.push(newCandle);
        if (candles.length > 2000) candles.shift();
    });

    ws.on('open', () => console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi WebSocket ${symbol}/${pair}/${timeframe}`));
    ws.on('close', () => {
        console.log(`‚ùå WebSocket ${symbol}/${pair}/${timeframe} ƒë√£ ƒë√≥ng.`);
        delete wsStreams[streamKey];
        delete activeSubscriptions[streamKey];
    });
    ws.on('error', (err) => console.error(`üö® L·ªói WebSocket ${symbol}/${pair}/${timeframe}:`, err.message));

    wsStreams[streamKey] = ws;
    activeSubscriptions[streamKey] = 1;
}

function unsubscribeBinance(symbol, pair, timeframe) {
    const streamKey = `${symbol.toLowerCase()}_${pair.toLowerCase()}_${timeframe}`;
    if (!wsStreams[streamKey]) return;

    activeSubscriptions[streamKey] -= 1;
    console.log(`üìâ Ng∆∞·ªùi theo d√µi ${symbol}/${pair}/${timeframe} gi·∫£m c√≤n: ${activeSubscriptions[streamKey]}`);

    if (activeSubscriptions[streamKey] <= 0) {
        console.log(`‚ùå ƒê√≥ng WebSocket ${symbol}/${pair}/${timeframe} do kh√¥ng c√≤n ng∆∞·ªùi theo d√µi.`);
        wsStreams[streamKey].close();
        delete wsStreams[streamKey];
        delete activeSubscriptions[streamKey];
    }
}
// Kh·ªüi ƒë·ªông WebSocket
subscribeBinance('BTC', 'USDT','15m');
subscribeBinance('ADA', 'USDT','15m');

// =====================
//     C·∫§U H√åNH
// =====================

const TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7644381153:AAGtd8uhtdPFbDqlpA9NAUSsIsePXQiO36g';
const BINANCE_API = 'https://api.binance.com/api/v3';
let adminChatId = null;

const timeframes = {
    '1m': '1 ph√∫t', 'm1': '1 ph√∫t', '3m': '3 ph√∫t', 'm3': '3 ph√∫t', '5m': '5 ph√∫t', 'm5': '5 ph√∫t',
    '15m': '15 ph√∫t', 'm15': '15 ph√∫t', '30m': '30 ph√∫t', 'm30': '30 ph√∫t', '1h': '1 gi·ªù', 'h1': '1 gi·ªù',
    '2h': '2 gi·ªù', 'h2': '2 gi·ªù', '4h': '4 gi·ªù', 'h4': '4 gi·ªù', '6h': '6 gi·ªù', 'h6': '6 gi·ªù',
    '8h': '8 gi·ªù', 'h8': '8 gi·ªù', '12h': '12 gi·ªù', 'h12': '12 gi·ªù', '1d': '1 ng√†y', 'd1': '1 ng√†y',
    '3d': '3 ng√†y', 'd3': '3 ng√†y', '1w': '1 tu·∫ßn', 'w1': '1 tu·∫ßn', '1M': '1 th√°ng', 'M1': '1 th√°ng'
};

function normalizeTimeframe(tfInput) {
    const mapping = {
        'm1': '1m', '1m': '1m', 'm3': '3m', '3m': '3m', 'm5': '5m', '5m': '5m', 'm15': '15m', '15m': '15m',
        'm30': '30m', '30m': '30m', 'h1': '1h', '1h': '1h', 'h2': '2h', '2h': '2h', 'h4': '4h', '4h': '4h',
        'h6': '6h', '6h': '6h', 'h8': '8h', '8h': '8h', 'h12': '12h', '12h': '12h', 'd1': '1d', '1d': '1d',
        'd3': '3d', '3d': '3d', 'w1': '1w', '1w': '1w', 'M1': '1M', '1M': '1M'
    };
    return mapping[tfInput] || null;
}

const bot = new TelegramBot(TOKEN, { polling: true });

// ƒê∆∞·ªùng d·∫´n file
const BOT_DB_PATH = path.join(__dirname, 'bot.db');
const BOT_LOG_PATH = path.join(__dirname, 'bot.log');
const MODEL_DIR = path.join(__dirname, 'model');

// L∆∞u chatId c·ªßa admin khi nh·∫≠n tin nh·∫Øn ƒë·∫ßu ti√™n
bot.on('message', (msg) => {
    if (!adminChatId) {
        adminChatId = msg.chat.id;
        console.log(`Admin chatId ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p: ${adminChatId}`);
        fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - Admin chatId: ${adminChatId}\n`);
    }
});

// =====================
//  SQLITE - L∆ØU TR·ªÆ D·ªÆ LI·ªÜU
// =====================
const db = new sqlite3.Database(BOT_DB_PATH, (err) => {
    if (err) {
        console.error('SQLite Error:', err.message);
        fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - L·ªói k·∫øt n·ªëi SQLite: ${err.message}\n`);
    } else {
        console.log('‚úÖ K·∫øt n·ªëi SQLite th√†nh c√¥ng.');
        fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - ‚úÖ K·∫øt n·ªëi SQLite th√†nh c√¥ng.\n`);
    }
});

db.serialize(() => {
    db.run(`
        CREATE TABLE IF NOT EXISTS watch_configs (
            chatId INTEGER NOT NULL,
            symbol TEXT NOT NULL,
            pair TEXT NOT NULL,
            timeframe TEXT NOT NULL,
            PRIMARY KEY (chatId, symbol, pair, timeframe)
        )`, (err) => {
        if (err) console.error('L·ªói t·∫°o b·∫£ng watch_configs:', err.message);
    });

    db.run(`
        CREATE TABLE IF NOT EXISTS signal_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chatId INTEGER NOT NULL,
            symbol TEXT NOT NULL,
            pair TEXT NOT NULL,
            timeframe TEXT NOT NULL,
            signal TEXT NOT NULL,
            confidence INTEGER NOT NULL,
            timestamp INTEGER NOT NULL,
            entry_price REAL NOT NULL,
            exit_price REAL,
            profit REAL
        )`, (err) => {
        if (err) console.error('L·ªói t·∫°o b·∫£ng signal_history:', err.message);
    });

    // Th√™m ch·ªâ m·ª•c cho c·ªôt chatId v√† timestamp
    db.run(`CREATE INDEX IF NOT EXISTS idx_signal_history_chatId ON signal_history (chatId)`, (err) => {
        if (err) console.error('L·ªói t·∫°o ch·ªâ m·ª•c idx_signal_history_chatId:', err.message);
    });
    db.run(`CREATE INDEX IF NOT EXISTS idx_signal_history_timestamp ON signal_history (timestamp)`, (err) => {
        if (err) console.error('L·ªói t·∫°o ch·ªâ m·ª•c idx_signal_history_timestamp:', err.message);
    });

    db.run(`
        CREATE TABLE IF NOT EXISTS user_settings (
            chatId INTEGER PRIMARY KEY,
            showTechnicalIndicators INTEGER DEFAULT 0
        )`, (err) => {
        if (err) console.error('L·ªói t·∫°o b·∫£ng user_settings:', err.message);
    });
});

// =====================
//  H√ÄM H·ªñ TR·ª¢
// =====================
function addWatchConfig(chatId, symbol, pair, timeframe, callback) {
    db.run(
        `INSERT OR REPLACE INTO watch_configs (chatId, symbol, pair, timeframe) VALUES (?, ?, ?, ?)`,
        [chatId, symbol, pair, timeframe],
        callback
    );
}

function deleteWatchConfig(chatId, symbol, pair, timeframe, callback) {
    db.run(
        `DELETE FROM watch_configs WHERE chatId = ? AND symbol = ? AND pair = ? AND timeframe = ?`,
        [chatId, symbol, pair, timeframe],
        callback
    );
}

function loadWatchConfigs() {
    return new Promise((resolve, reject) => {
        db.all("SELECT chatId, symbol, pair, timeframe FROM watch_configs", [], (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
        });
    });
}

function getUserSettings(chatId) {
    return new Promise((resolve, reject) => {
        db.get(
            `SELECT showTechnicalIndicators FROM user_settings WHERE chatId = ?`,
            [chatId],
            (err, row) => {
                if (err) reject(err);
                resolve(row ? row.showTechnicalIndicators : 0);
            }
        );
    });
}

function setUserSettings(chatId, showTechnicalIndicators) {
    db.run(
        `INSERT OR REPLACE INTO user_settings (chatId, showTechnicalIndicators) VALUES (?, ?)`,
        [chatId, showTechnicalIndicators],
        (err) => {
            if (err) console.error('L·ªói l∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng:', err.message);
        }
    );
}

// =====================
// C·∫§U H√åNH LSTM
// =====================
let currentConfig = {
    windowSize: 5,
    units: 32,
    epochs: 10
};

let bestConfig = { ...currentConfig };
let bestAccuracy = 0;
let recentAccuracies = [];
let lastAccuracy = 0;
let model;
function createModel(windowSize, units) {
    const model = tf.sequential();

    // LSTM Layer - Gi·ªØ `returnSequences: true` ƒë·ªÉ d·ª± ƒëo√°n chu·ªói
    model.add(tf.layers.lstm({
        units,
        inputShape: [windowSize, 22],
        returnSequences: true,
        kernelInitializer: 'glorotUniform'  // Tr√°nh l·ªói `Orthogonal initializer`
    }));

    // Th√™m Dense ƒë·ªÉ gi·∫£m chi·ªÅu d·ªØ li·ªáu
    model.add(tf.layers.dense({ units: Math.max(units / 2, 16), activation: 'relu' }));

    // BatchNormalization - ƒê·∫∑t sau Dense ƒë·ªÉ tr√°nh l·ªói `built`
    model.add(tf.layers.batchNormalization());

    // Fully Connected Layers
    model.add(tf.layers.dense({ units: 10, activation: 'relu' }));

    // Output Layer - D·ª± ƒëo√°n t√≠n hi·ªáu giao d·ªãch [LONG, SHORT, WAIT]
    model.add(tf.layers.dense({ units: 3, activation: 'softmax' }));

    // Compile Model
    model.compile({ optimizer: 'adam', loss: 'categoricalCrossentropy', metrics: ['accuracy'] });

    return model;
}


async function optimizeModel() {
    if (recentAccuracies.length < 50) return;

    const avgAcc = recentAccuracies.reduce((sum, val) => sum + val, 0) / recentAccuracies.length;
    if (avgAcc > 0.7) return;

    console.log('‚öôÔ∏è B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a m√¥ h√¨nh...');
    fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a m√¥ h√¨nh...\n`);

    const configsToTest = [
        { windowSize: 5, units: 32, epochs: 10 },
        { windowSize: 10, units: 64, epochs: 15 },
        { windowSize: 15, units: 128, epochs: 20 }
    ];

    for (const config of configsToTest) {
        console.log(`Th·ª≠ c·∫•u h√¨nh: ${JSON.stringify(config)}`);
        currentConfig = { ...config };
        recentAccuracies = [];
        const historicalData = await fetchKlines('BTC', 'USDT', '1h', 200);
        if (historicalData) {
            for (let i = currentConfig.windowSize; i < Math.min(historicalData.length, 50 + currentConfig.windowSize); i++) {
                await selfEvaluateAndTrain(historicalData.slice(0, i), i, historicalData, 'BTC', 'USDT', '1h');
            }
        }

        const newAvgAcc = recentAccuracies.length > 0 ? recentAccuracies.reduce((sum, val) => sum + val, 0) / recentAccuracies.length : 0;
        console.log(`ƒê·ªô ch√≠nh x√°c trung b√¨nh v·ªõi c·∫•u h√¨nh ${JSON.stringify(config)}: ${(newAvgAcc * 100).toFixed(2)}%`);

        if (newAvgAcc > bestAccuracy) {
            bestAccuracy = newAvgAcc;
            bestConfig = { ...config };
        }
    }

    if (bestConfig) {
        Object.assign(currentConfig, bestConfig);
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tham s·ªë m√¥ h√¨nh: ${JSON.stringify(currentConfig)}`);
    } else {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh t·ªëi ∆∞u n√†o, gi·ªØ nguy√™n tham s·ªë hi·ªán t·∫°i.");
    }
}

async function initializeModel() {
    model = createModel(currentConfig.windowSize, currentConfig.units);
    console.log('‚úÖ LSTM model ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
}

async function trainModelData(data, symbol, pair, timeframe) {
    try {
        const inputs = [];
        const outputs = [];

        for (let i = currentConfig.windowSize; i < data.length - 5; i++) {
            const windowFeatures = [];
            const futureSignals = [];

            for (let j = i - currentConfig.windowSize; j < i; j++) {
                windowFeatures.push(computeFeature(data, j, symbol, pair, timeframe));
            }

            // D·ª± ƒëo√°n chu·ªói t√≠n hi·ªáu 5 n·∫øn ti·∫øp theo
            for (let k = 0; k < 5; k++) {
                if (i + k + 1 < data.length) {
                    const currentPrice = data[i + k].close;
                    const futurePrice = data[i + k + 1].close;
                    const priceChange = (futurePrice - currentPrice) / currentPrice * 100;

                    let trueSignal = [0, 0, 1]; // WAIT
                    if (priceChange > 0.5) trueSignal = [1, 0, 0]; // LONG
                    else if (priceChange < -0.5) trueSignal = [0, 1, 0]; // SHORT

                    futureSignals.push(trueSignal);
                }
            }

            // ƒê·∫£m b·∫£o futureSignals c√≥ ƒë√∫ng 5 b∆∞·ªõc (n·∫øu thi·∫øu, b·ªï sung WAIT)
            while (futureSignals.length < 5) {
                futureSignals.push([0, 0, 1]);
            }

            inputs.push(windowFeatures);
            outputs.push(futureSignals); // Gi·ªù outputs lu√¥n c√≥ shape `[5, 3]`
        }

        if (inputs.length === 0) return;

        // ƒê·∫£m b·∫£o shape [batch_size, sequence_length, feature_dim]
        const xs = tf.tensor3d(inputs, [inputs.length, currentConfig.windowSize, 22]);
        const ys = tf.tensor3d(outputs, [outputs.length, 5, 3]); // ƒê·∫£m b·∫£o c√≥ shape `[batch_size, 5, 3]`

        await model.fit(xs, ys, { epochs: currentConfig.epochs, batchSize: 32, shuffle: true });

        console.log(`‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v·ªõi ${symbol}/${pair} (${timeframe}).`);
        xs.dispose();
        ys.dispose();
    } catch (error) {
        console.error(`‚ùå L·ªói hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi ${symbol}/${pair} (${timeframe}):`, error.message);
    }
}




async function trainModelWithMultiplePairs() {
    const pairs = [
        { symbol: 'BTC', pair: 'USDT', timeframe: '1h' },
        { symbol: 'ADA', pair: 'USDT', timeframe: '1h' },
    ];

    for (const { symbol, pair, timeframe } of pairs) {
        const data = await fetchKlines(symbol, pair, timeframe, 500);
        if (data) {
            await trainModelData(data, symbol, pair, timeframe);
        } else {
            console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ${symbol}/${pair} (${timeframe}) ƒë·ªÉ hu·∫•n luy·ªán.`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

// =====================
// H√ÄM T√çNH CH·ªà B√ÅO
// =====================
function computeRSI(close, period = 14) {
    const result = RSI.calculate({ values: close, period });
    return result.length > 0 ? result[result.length - 1] : 50;
}

function computeMA(close, period = 20) {
    const ma = SMA.calculate({ values: close, period });
    return ma.length > 0 ? ma[ma.length - 1] : 0;
}

function computeMACD(close) {
    const result = MACD.calculate({ values: close, fastPeriod: 12, slowPeriod: 26, signalPeriod: 9 });
    return result.length > 0 ? [result[result.length - 1].MACD || 0, result[result.length - 1].signal || 0, result[result.length - 1].histogram || 0] : [0, 0, 0];
}

function computeBollingerBands(close, period = 20, stdDev = 2) {
    const result = BollingerBands.calculate({ values: close, period, stdDev });
    return result.length > 0 ? [result[result.length - 1].upper || 0, result[result.length - 1].middle || 0, result[result.length - 1].lower || 0] : [0, 0, 0];
}

function computeADX(data, period = 14) {
    const result = ADX.calculate({ high: data.map(d => d.high), low: data.map(d => d.low), close: data.map(d => d.close), period });
    return result.length > 0 ? result[result.length - 1].adx || 0 : 0;
}

function computeATR(data, period = 14) {
    const result = ATR.calculate({ high: data.map(d => d.high), low: data.map(d => d.low), close: data.map(d => d.close), period });
    return result.length > 0 ? result[result.length - 1] || 0 : 0;
}

function computeStochastic(data, kPeriod = 14, dPeriod = 3, smooth = 3) {
    const result = Stochastic.calculate({
        high: data.map(d => d.high),
        low: data.map(d => d.low),
        close: data.map(d => d.close),
        period: kPeriod,
        signalPeriod: dPeriod,
        smooth
    });
    return result.length > 0 ? result[result.length - 1].k : 50;
}

function computeVWAP(data) {
    let totalVolume = 0;
    let totalPriceVolume = 0;
    for (const d of data) {
        const typicalPrice = (d.high + d.low + d.close) / 3;
        totalPriceVolume += typicalPrice * d.volume;
        totalVolume += d.volume;
    }
    return totalVolume > 0 ? totalPriceVolume / totalVolume : 0;
}

function computeOBV(data) {
    const result = OBV.calculate({ close: data.map(d => d.close), volume: data.map(d => d.volume) });
    return result.length > 0 ? result[result.length - 1] : 0;
}

function computeIchimoku(data) {
    const result = IchimokuCloud.calculate({
        high: data.map(d => d.high),
        low: data.map(d => d.low),
        close: data.map(d => d.close),
        conversionPeriod: 9,
        basePeriod: 26,
        spanPeriod: 52,
        displacement: 26
    });
    return result.length > 0 ? result[result.length - 1] : null;
}

function computeFibonacciLevels(data) {
    const highs = data.map(d => d.high);
    const lows = data.map(d => d.low);
    const maxPrice = Math.max(...highs);
    const minPrice = Math.min(...lows);
    const diff = maxPrice - minPrice;
    return {
        0.236: maxPrice - diff * 0.236,
        0.382: maxPrice - diff * 0.382,
        0.5: maxPrice - diff * 0.5,
        0.618: maxPrice - diff * 0.618,
        0.786: maxPrice - diff * 0.786
    };
}

function computeSupportResistance(data) {
    const highs = data.map(d => d.high);
    const lows = data.map(d => d.low);
    return { support: Math.min(...lows), resistance: Math.max(...highs) };
}

// =====================
// H√ÄM CHU·∫®N H√ìA ONE-HOT ENCODING
// =====================
const symbolMap = new Map();
const pairMap = new Map();
const timeframeMap = new Map();
const EMBEDDING_SIZE = 3;

function getEmbedding(value, map) {
    if (!map.has(value)) {
        const embedding = Array.from({ length: EMBEDDING_SIZE }, () => Math.random());
        map.set(value, embedding);
    }
    return map.get(value);
}

function computeFeature(data, j, symbol, pair, timeframe) {
    if (!data || !data[j]) {
        console.error(`‚ö†Ô∏è computeFeature: Thi·∫øu d·ªØ li·ªáu cho ${symbol}/${pair} (${timeframe}) t·∫°i index ${j}`);
        return Array(20).fill(0);
    }

    const subData = data.slice(0, j + 1);
    const close = subData.map(d => d.close);
    const volume = subData.map(d => d.volume);

    const maxClose = close.length > 0 ? Math.max(...close) : 1;
    const safeDivide = (num, denom) => (denom !== 0 ? num / denom : 0);

    // T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
    const rsi = computeRSI(close) || 50;
    const ma10 = computeMA(close, 10) || 0;
    const ma50 = computeMA(close, 50) || 0;
    const ema200 = computeMA(close, 200) || 0;
    const atr = computeATR(subData) || 0.0001;
    const adx = computeADX(subData) || 0;
    const stochasticK = computeStochastic(subData) || 50;
    const vwap = computeVWAP(subData) || 0;
    const obv = computeOBV(subData) || 0;
    const fibLevels = computeFibonacciLevels(subData) || { 0.618: 0 };

    const ichimoku = computeIchimoku(subData) || { conversionLine: 0, baseLine: 0 };
    const histogram = computeMACD(close)?.[2] || 0;
    const middleBB = computeBollingerBands(close)?.[1] || 0;

    // Ki·ªÉm tra volume spike
    const volumeMA = computeMA(volume, 20) || 0;
    const volumeSpike = volume[volume.length - 1] > volumeMA * 1.5 ? 1 : 0;

    // One-hot encoding cho Symbol, Pair, Timeframe
    const symbolEmbedding = getEmbedding(symbol, symbolMap);
    const pairEmbedding = getEmbedding(pair, pairMap);
    const timeframeEmbedding = getEmbedding(timeframe, timeframeMap);

    // T·∫°o vector ƒë·∫∑c tr∆∞ng
    const features = [
        rsi / 100,
        adx / 100,
        safeDivide(histogram, maxClose),
        volumeSpike,
        safeDivide(ma10 - ma50, maxClose),
        safeDivide(close[close.length - 1] - middleBB, maxClose),
        stochasticK / 100,
        safeDivide(close[close.length - 1] - vwap, maxClose),
        obv / 1e6,
        safeDivide(ichimoku.conversionLine - ichimoku.baseLine, maxClose),
        safeDivide(close[close.length - 1] - fibLevels[0.618], maxClose),
        safeDivide(close[close.length - 1] - ema200, maxClose),  // EMA 200
        safeDivide(close[close.length - 1] - atr, maxClose),  // ATR
        ...symbolEmbedding,
        ...pairEmbedding,
        ...timeframeEmbedding
    ];

    return features.map(f => (isNaN(f) || f === undefined ? 0 : f));
}
// =====================
// PH√ÇN T√çCH CRYPTO
// =====================
async function getCryptoAnalysis(symbol, pair, timeframe, chatId, customThresholds = {}) {
    const cacheKey = `${symbol}_${pair}_${timeframe}`;
    let df = cacheKlines.has(cacheKey) ? cacheKlines.get(cacheKey) : await fetchKlines(symbol, pair, timeframe);

    if (!df || df.length < currentConfig.windowSize) {
        return { result: '‚ùó Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n', confidence: 0 };
    }

    const windowFeatures = df.slice(-currentConfig.windowSize).map((_, i) => {
        let features = computeFeature(df, df.length - currentConfig.windowSize + i, symbol, pair, timeframe);
        return features.map(f => isNaN(f) ? 0 : f);
    });

    if (windowFeatures.length < 5) {
        return { result: '‚ùó Kh√¥ng ƒë·ªß d·ªØ li·ªáu h·ª£p l·ªá', confidence: 0 };
    }

    const currentPrice = df[df.length - 1].close;
    const closePrices = df.map(d => d.close);
    const volume = df.map(d => d.volume);
    const volumeSpike = volume[volume.length - 1] > (computeMA(volume, 20) || 0) * 1.5 ? 1 : 0;

    const indicators = {
        atr: computeATR(df) || 0.0001,
        rsi: computeRSI(closePrices) || 50,
        adx: computeADX(df) || 0,
        macd: computeMACD(closePrices) || [0, 0, 0],
        bollinger: computeBollingerBands(closePrices) || [0, 0, 0],
        stochastic: computeStochastic(df) || 50,
        vwap: computeVWAP(df) || currentPrice,
        obv: computeOBV(df) || 0,
        ichimoku: computeIchimoku(df) || { spanA: currentPrice, spanB: currentPrice },
        fibLevels: computeFibonacciLevels(df) || { 0.618: currentPrice, 0.5: currentPrice },
        supportRes: computeSupportResistance(df) || {}
    };

    const [macd, signal, histogram] = indicators.macd;
    const [upperBB, middleBB, lowerBB] = indicators.bollinger;
    const { support = currentPrice - indicators.atr * 2, resistance = currentPrice + indicators.atr * 2 } = indicators.supportRes;

    const input = tf.tensor3d([windowFeatures], [1, 5, 22]);
    const prediction = model.predict(input);
    const predictions = prediction.arraySync()[0];
    input.dispose();
    prediction.dispose();

    let longProb = 0, shortProb = 0, waitProb = 0;
    for (const [l, s, w] of predictions) {
        longProb += l;
        shortProb += s;
        waitProb += w;
    }
    longProb /= 5;
    shortProb /= 5;
    waitProb /= 5;

    let signalType = 'WAIT';
    let signalText = '‚ö™Ô∏è ƒê·ª¢I - Ch∆∞a c√≥ t√≠n hi·ªáu';
    let confidence = Math.round(Math.max(longProb, shortProb, waitProb) * 100);
    let entry = currentPrice, sl = 0, tp = 0;

    if (longProb > shortProb) {
        signalType = 'LONG';
        signalText = 'üü¢ LONG - Mua';
        sl = Math.max(currentPrice - Math.max(indicators.atr * 0.5, indicators.atr * 0.3), support);
        tp = Math.min(currentPrice + Math.max(indicators.atr, indicators.atr * 1.2), resistance);
    } else if (shortProb > longProb) {
        signalType = 'SHORT';
        signalText = 'üî¥ SHORT - B√°n';
        sl = Math.min(currentPrice + Math.max(indicators.atr * 0.5, indicators.atr * 0.3), resistance);
        tp = Math.max(currentPrice - Math.max(indicators.atr, indicators.atr * 1.2), support);
    } else {
        confidence = Math.min(confidence, 50);
    }

    if (indicators.adx < 20) confidence = Math.min(confidence, 50);

    // Ki·ªÉm tra c√†i ƒë·∫∑t c·ªßa ng∆∞·ªùi d√πng (hi·ªán ch·ªâ b√°o k·ªπ thu·∫≠t hay kh√¥ng)
    const showTechnicalIndicators = await getUserSettings(chatId);
    const details = [];

    if (showTechnicalIndicators) {
        details.push(`üìà RSI: ${indicators.rsi.toFixed(1)}`);
        details.push(`üéØ Stochastic %K: ${indicators.stochastic.toFixed(1)}`);
        details.push(`üìä VWAP: ${indicators.vwap.toFixed(4)}`);
        details.push(`üì¶ OBV: ${(indicators.obv / 1e6).toFixed(2)}M`);
        details.push(`‚òÅÔ∏è Ichimoku: ${currentPrice > Math.max(indicators.ichimoku.spanA, indicators.ichimoku.spanB) ? 'Tr√™n ƒë√°m m√¢y' : currentPrice < Math.min(indicators.ichimoku.spanA, indicators.ichimoku.spanB) ? 'D∆∞·ªõi ƒë√°m m√¢y' : 'Trong ƒë√°m m√¢y'}`);
        details.push(`üìè Fib Levels: 0.618: ${indicators.fibLevels[0.618].toFixed(6)}, 0.5: ${indicators.fibLevels[0.5].toFixed(6)}`);
    }

    details.push(`üì¶ Volume: ${volumeSpike ? 'TƒÇNG ƒê·ªòT BI·∫æN' : 'B√åNH TH∆Ø·ªúNG'}`);
    details.push(`üõ°Ô∏è H·ªó tr·ª£: ${support.toFixed(4)}, Kh√°ng c·ª±: ${resistance.toFixed(4)}`);
    details.push(`üìä Xu h∆∞·ªõng: ${indicators.adx < 20 ? 'ƒêi ngang' : longProb > shortProb ? 'TƒÉng (AI d·ª± ƒëo√°n)' : 'Gi·∫£m (AI d·ª± ƒëo√°n)'}`);
    details.push(`‚úÖ ƒê·ªô tin c·∫≠y: ${confidence}%`);
    details.push(`üéØ ƒêi·ªÉm v√†o: ${entry.toFixed(4)}`);
    details.push(`üõë SL: ${sl.toFixed(4)}`);
    details.push(`üí∞ TP: ${tp.toFixed(4)}`);

    return {
        result: `üìä *Ph√¢n t√≠ch ${symbol.toUpperCase()}/${pair.toUpperCase()} (${timeframe})*\nüí∞ Gi√°: ${currentPrice.toFixed(4)}\n‚ö°Ô∏è *${signalText}*\n${details.join('\n')}`,
        confidence,
        signalType,
        signalText,
        entryPrice: entry,
        sl,
        tp
    };
}


// =====================
// SELF-EVALUATE & TRAIN
// =====================
let enableSimulation = true;
let trainingCounter = 0;
let shouldStopTraining = false;

async function selfEvaluateAndTrain(historicalSlice, currentIndex, fullData, symbol, pair, timeframe) {
    if (!historicalSlice || !fullData || shouldStopTraining) {
        console.log("üö´ Kh√¥ng th·ªÉ hu·∫•n luy·ªán: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ d·ª´ng hu·∫•n luy·ªán.");
        return;
    }
    if (historicalSlice.length < currentConfig.windowSize) {
        console.log(`üö´ Kh√¥ng th·ªÉ hu·∫•n luy·ªán: D·ªØ li·ªáu (${historicalSlice.length}) nh·ªè h∆°n windowSize (${currentConfig.windowSize}).`);
        return;
    }
    if (currentIndex + 11 > fullData.length) {
        console.log(`üö´ Kh√¥ng th·ªÉ hu·∫•n luy·ªán: Kh√¥ng ƒë·ªß d·ªØ li·ªáu t∆∞∆°ng lai.`);
        return;
    }

    const currentPrice = historicalSlice[historicalSlice.length - 1].close;
    const futureData = fullData.slice(currentIndex + 1, currentIndex + 11);
    const futurePrice = futureData.length >= 10 ? futureData[futureData.length - 1].close : null;
    if (!futurePrice) {
        console.log("üö´ Kh√¥ng th·ªÉ hu·∫•n luy·ªán: Kh√¥ng c√≥ d·ªØ li·ªáu gi√° t∆∞∆°ng lai.");
        return;
    }

    const priceChange = ((futurePrice - currentPrice) / currentPrice) * 100;
    let trueSignal = [0, 0, 1]; // WAIT
    if (priceChange > 0.5) trueSignal = [1, 0, 0]; // LONG
    else if (priceChange < -0.5) trueSignal = [0, 1, 0]; // SHORT

    const windowFeatures = [];
    for (let i = historicalSlice.length - currentConfig.windowSize; i < historicalSlice.length; i++) {
        const features = computeFeature(historicalSlice, i, symbol, pair, timeframe);
        if (features.some(f => isNaN(f))) {
            console.warn(`‚ö†Ô∏è B·ªè qua n·∫øn ${i} do d·ªØ li·ªáu ch·ª©a NaN.`);
            return;
        }
        windowFeatures.push(features);
    }

    // ƒê·∫£m b·∫£o `windowFeatures` c√≥ ƒë√∫ng `sequence_length = 5`
    while (windowFeatures.length < 5) {
        windowFeatures.push(windowFeatures[windowFeatures.length - 1]); // L·∫∑p l·∫°i d·ªØ li·ªáu cu·ªëi n·∫øu thi·∫øu
    }

    // ƒê·∫£m b·∫£o `trueSignal` c√≥ `sequence_length = 5`
    const futureSignals = new Array(5).fill(trueSignal);

    trainingCounter++;

    try {
        const usedMemoryMB = process.memoryUsage().heapUsed / 1024 / 1024;
        const batchSize = usedMemoryMB > 450 ? 8 : 16;

        // Chuy·ªÉn ƒë·ªïi sang tensor ƒë√∫ng ƒë·ªãnh d·∫°ng `[batch_size, sequence_length, feature_dim]`
        const xs = tf.tensor3d([windowFeatures], [1, currentConfig.windowSize, 22]);
        const ys = tf.tensor3d([futureSignals], [1, 5, 3]); // D·ª± ƒëo√°n chu·ªói 5 b∆∞·ªõc

        const history = await model.fit(xs, ys, { epochs: 1, batchSize, shuffle: true });

        xs.dispose();
        ys.dispose();

        const loss = history.history.loss[0];
        lastAccuracy = 1.0 - loss;
        recentAccuracies.push(lastAccuracy);
        if (recentAccuracies.length > 50) recentAccuracies.shift();

        console.log(`‚úÖ Hu·∫•n luy·ªán t·∫°i n·∫øn ${currentIndex} | RAM: ${usedMemoryMB.toFixed(2)} MB | Loss: ${loss.toFixed(4)} | Accuracy: ${(lastAccuracy * 100).toFixed(2)}%`);
    } catch (error) {
        console.error(`‚ùå L·ªói hu·∫•n luy·ªán: ${error.message}`);
    }
}



// B√°o c√°o hi·ªáu su·∫•t m√¥ h√¨nh
function reportModelPerformance() {
    if (recentAccuracies.length < 50) return;
    const avgAcc = recentAccuracies.reduce((sum, val) => sum + val, 0) / recentAccuracies.length;
    const maxAcc = Math.max(...recentAccuracies);
    const minAcc = Math.min(...recentAccuracies);
    const message = `üìä *Hi·ªáu su·∫•t m√¥ h√¨nh LSTM*\n`
        + `ƒê·ªô ch√≠nh x√°c trung b√¨nh: ${(avgAcc * 100).toFixed(2)}%\n`
        + `ƒê·ªô ch√≠nh x√°c cao nh·∫•t: ${(maxAcc * 100).toFixed(2)}%\n`
        + `ƒê·ªô ch√≠nh x√°c th·∫•p nh·∫•t: ${(minAcc * 100).toFixed(2)}%\n`
        + `S·ªë l·∫ßn hu·∫•n luy·ªán: ${trainingCounter}`;
    if (adminChatId) {
        bot.sendMessage(adminChatId, message, { parse_mode: 'Markdown' });
    }
}
setInterval(reportModelPerformance, 60 * 60 * 1000); // B√°o c√°o m·ªói gi·ªù

function cleanupMemory() {
    const now = Date.now();
    for (const [key, value] of signalBuffer.entries()) {
        if (now - value.timestamp > 60 * 60 * 1000) {
            signalBuffer.delete(key);
        }
    }
    console.log(`üßπ ƒê√£ d·ªçn d·∫πp b·ªô nh·ªõ. S·ªë t√≠n hi·ªáu trong buffer: ${signalBuffer.size}`);
}
setInterval(cleanupMemory, 30 * 60 * 1000); // D·ªçn d·∫πp m·ªói 30 ph√∫t

// =====================
// CH·∫æ ƒê·ªò GI·∫¢ L·∫¨P
// =====================
let lastIndexMap = new Map();
let lastSignalTimestamps = {};
const SIGNAL_COOLDOWN = 10 * 60 * 1000;
const signalBuffer = new Map();
let apiErrorCounter = 0;

async function fetchKlines(symbol, pair, timeframe, limit = 500, retries = 3, delay = 5000) {
    const cacheKey = `${symbol}_${pair}_${timeframe}`;

    // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu trong cache, ∆∞u ti√™n l·∫•y t·ª´ ƒë√≥
    if (cacheKlines.has(cacheKey)) {
        const candles = cacheKlines.get(cacheKey);
        if (candles.length >= limit) {
            return candles.slice(-limit);
        }
    }

    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const response = await axios.get(`${BINANCE_API}/klines`, {
                params: { symbol: `${symbol.toUpperCase()}${pair.toUpperCase()}`, interval: timeframe, limit },
                timeout: 10000,
            });

            if (!response || !response.data || !Array.isArray(response.data)) {
                throw new Error('D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API kh√¥ng h·ª£p l·ªá');
            }

            const klines = response.data.map(d => ({
                timestamp: d[0],
                open: parseFloat(d[1]),
                high: parseFloat(d[2]),
                low: parseFloat(d[3]),
                close: parseFloat(d[4]),
                volume: parseFloat(d[5])
            }));

            // L·ªçc b·ªè d·ªØ li·ªáu l·ªói (c√≥ gi√° tr·ªã 0 ho·∫∑c null)
            const filteredKlines = klines.filter(k =>
                k.close > 0 && k.open > 0 && k.high > 0 && k.low > 0 && k.volume >= 0
            );

            // L∆∞u v√†o cache theo c·∫∑p giao d·ªãch & khung th·ªùi gian
            cacheKlines.set(cacheKey, filteredKlines);

            console.log(`‚úÖ L·∫•y ${filteredKlines.length} n·∫øn t·ª´ API cho ${symbol}/${pair} (${timeframe})`);
            return filteredKlines;
        } catch (error) {
            let errorMessage = error.message;
            if (error.response) {
                errorMessage = `HTTP ${error.response.status}: ${JSON.stringify(error.response.data)}`;
            }

            console.error(`‚ùå API Error (${symbol}/${pair}, attempt ${attempt}/${retries}): ${errorMessage}`);
            fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - API Error: ${errorMessage}\n`);

            // N·∫øu l·ªói 429 (Rate Limit), tƒÉng th·ªùi gian ch·ªù
            if (error.response && error.response.status === 429) {
                delay *= 2;
                console.warn(`‚ö†Ô∏è API Rate Limit - TƒÉng th·ªùi gian ch·ªù l√™n ${delay}ms`);
            }

            // N·∫øu th·ª≠ h·∫øt s·ªë l·∫ßn retry m√† v·∫´n l·ªói, tr·∫£ v·ªÅ null
            if (attempt === retries) return null;

            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}


async function simulateTrade(symbol, pair, timeframe, signal, entryPrice, sl, tp, timestamp) {
    if (!signal || !['LONG', 'SHORT', 'WAIT'].includes(signal)) {
        console.error(`‚ö†Ô∏è simulateTrade: signal kh√¥ng h·ª£p l·ªá (${signal}), b·ªè qua gi·∫£ l·∫≠p.`);
        return { exitPrice: null, profit: null };
    }

    const data = await fetchKlines(symbol, pair, timeframe, 300);
    if (!data) return { exitPrice: null, profit: null };

    let exitPrice = null;
    let profit = null;

    for (let i = 0; i < data.length; i++) {
        if (data[i].timestamp <= timestamp) continue;
        const high = data[i].high;
        const low = data[i].low;

        if (signal === 'LONG') {
            if (low <= sl) {
                exitPrice = sl;
                profit = ((sl - entryPrice) / entryPrice) * 100;
                break;
            } else if (high >= tp) {
                exitPrice = tp;
                profit = ((tp - entryPrice) / entryPrice) * 100;
                break;
            }
        } else if (signal === 'SHORT') {
            if (high >= sl) {
                exitPrice = sl;
                profit = ((entryPrice - sl) / entryPrice) * 100;
                break;
            } else if (low <= tp) {
                exitPrice = tp;
                profit = ((entryPrice - tp) / entryPrice) * 100;
                break;
            }
        }
    }

    if (exitPrice === null) {
        exitPrice = data[data.length - 1].close;
        profit = signal === 'LONG' ? ((exitPrice - entryPrice) / entryPrice) * 100 : ((entryPrice - exitPrice) / entryPrice) * 100;
    }

    return { exitPrice, profit };
}

async function simulateConfig(config, stepInterval) {
    const { chatId, symbol, pair, timeframe } = config;
    const configKey = `${chatId}_${symbol}_${pair}_${timeframe}`;

    const valid = await isValidMarket(symbol, pair);
    if (!valid) {
        console.error(`‚ùå C·∫∑p ${symbol.toUpperCase()}/${pair.toUpperCase()} kh√¥ng h·ª£p l·ªá, b·ªè qua gi·∫£ l·∫≠p.`);
        return;
    }

    const historicalData = await fetchKlines(symbol, pair, timeframe);
    if (!historicalData) {
        console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho ${symbol}/${pair}, b·ªè qua gi·∫£ l·∫≠p.`);
        apiErrorCounter++;
        if (apiErrorCounter >= 3 && adminChatId) {
            bot.sendMessage(adminChatId, `üö® *C·∫£nh b√°o*: API Binance li√™n t·ª•c th·∫•t b·∫°i (3 l·∫ßn li√™n ti·∫øp). Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c rate limit.`, { parse_mode: 'Markdown' });
            apiErrorCounter = 0;
        }
        return;
    }

    apiErrorCounter = 0;

    let currentIndex = lastIndexMap.has(configKey) ? lastIndexMap.get(configKey) : currentConfig.windowSize;

    async function simulateStep() {
        if (currentIndex >= historicalData.length || !enableSimulation) {
            console.log(`‚úÖ D·ª´ng gi·∫£ l·∫≠p ${symbol}/${pair} (${timeframes[timeframe]})`);
            lastIndexMap.delete(configKey);
            return;
        }
        try {
            const historicalSlice = historicalData.slice(0, currentIndex);
            if (historicalSlice.length < currentConfig.windowSize) {
                currentIndex++;
                setTimeout(simulateStep, stepInterval);
                return;
            }
            const { result, confidence, signalType, signalText, entryPrice, sl, tp } = await getCryptoAnalysis(symbol, pair, timeframe, chatId);
            const now = Date.now();
            if (!shouldStopTraining) await selfEvaluateAndTrain(historicalSlice, currentIndex, historicalData, symbol, pair, timeframe);
            lastIndexMap.set(configKey, currentIndex + 1);
            currentIndex++;
            setTimeout(simulateStep, stepInterval);
        } catch (error) {
            console.error(`L·ªói gi·∫£ l·∫≠p ${symbol}/${pair}: ${error.message}`);
            setTimeout(simulateStep, 30000);
        }
    }
    console.log(`B·∫Øt ƒë·∫ßu gi·∫£ l·∫≠p ${symbol}/${pair} (${timeframes[timeframe]}) t·ª´ n·∫øn ${currentIndex}...`);
    simulateStep();
}

async function simulateRealTimeForConfigs(stepInterval = 1000) {
    const configs = await loadWatchConfigs();
    if (!configs || configs.length === 0) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ c·∫•u h√¨nh watch n√†o ƒë·ªÉ gi·∫£ l·∫≠p.');
        return;
    }
    for (let i = 0; i < configs.length; i++) {
        await simulateConfig(configs[i], stepInterval);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

async function isValidMarket(symbol, pair) {
    try {
        const response = await axios.get(`${BINANCE_API}/ticker/price`, {
            params: { symbol: `${symbol.toUpperCase()}${pair.toUpperCase()}` },
            timeout: 5000,
        });
        return !!response.data.price;
    } catch (error) {
        console.error(`L·ªói ki·ªÉm tra c·∫∑p ${symbol}/${pair}: ${error.message}`);
        return false;
    }
}

// =====================
// L·ªÜNH BOT
// =====================
const autoWatchList = new Map();

bot.onText(/\?(.+)/, async (msg, match) => {
    try {
        const parts = match[1].split(',').map(p => p.trim().toLowerCase());
        if (parts.length < 3) return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è C√∫ ph√°p sai! V√≠ d·ª•: ?ada,usdt,5m');

        const [symbol, pair, timeframeInput] = parts;
        const timeframe = normalizeTimeframe(timeframeInput);
        if (!timeframes[timeframe]) return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è Khung th·ªùi gian kh√¥ng h·ª£p l·ªá!`);

        const valid = await isValidMarket(symbol, pair);
        if (!valid) return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è C·∫∑p ${symbol.toUpperCase()}/${pair.toUpperCase()} kh√¥ng t·ªìn t·∫°i tr√™n Binance!`);

        const chatId = msg.chat.id;
        const { result } = await getCryptoAnalysis(symbol, pair, timeframe, chatId);
        bot.sendMessage(msg.chat.id, result, { parse_mode: 'Markdown' });
    } catch (error) {
        bot.sendMessage(msg.chat.id, `‚ùå L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
});

bot.onText(/\/tinhieu (.+)/, async (msg, match) => {
    try {
        let parts = match[1].split(',').map(p => p.trim().toLowerCase());
        if (parts.length < 3) {
            parts = match[1].split(/\s+/).map(p => p.trim().toLowerCase());
            if (parts.length !== 3) return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è C√∫ ph√°p sai! V√≠ d·ª•: /tinhieu ada,usdt,5m');
        }
        const [symbol, pair, timeframeInput] = parts;
        const timeframe = normalizeTimeframe(timeframeInput);
        if (!timeframes[timeframe]) return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è Khung th·ªùi gian kh√¥ng h·ª£p l·ªá!`);

        const valid = await isValidMarket(symbol, pair);
        if (!valid) return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è C·∫∑p ${symbol.toUpperCase()}/${pair.toUpperCase()} kh√¥ng t·ªìn t·∫°i tr√™n Binance!`);

        const chatId = msg.chat.id;
        if (!autoWatchList.has(chatId)) autoWatchList.set(chatId, []);
        const watchList = autoWatchList.get(chatId);
        if (!watchList.some(w => w.symbol === symbol && w.pair === pair && w.timeframe === timeframe)) {
            watchList.push({ symbol, pair, timeframe });
            addWatchConfig(chatId, symbol, pair, timeframe, (err) => {
                if (err) console.error('L·ªói l∆∞u c·∫•u h√¨nh:', err.message);
            });
            bot.sendMessage(msg.chat.id, `‚úÖ ƒê√£ b·∫≠t theo d√µi ${symbol.toUpperCase()}/${pair.toUpperCase()} (${timeframes[timeframe]})`);
            subscribeBinance(symbol, pair,timeframe);
            const configKey = `${chatId}_${symbol}_${pair}_${timeframe}`;
            if (!lastIndexMap.has(configKey)) simulateConfig({ chatId, symbol, pair, timeframe }, 1000);
        } else {
            bot.sendMessage(msg.chat.id, '‚ÑπÔ∏è B·∫°n ƒë√£ theo d√µi c·∫∑p n√†y r·ªìi!');
        }
    } catch (error) {
        bot.sendMessage(msg.chat.id, `‚ùå L·ªói /tinhieu: ${error.message}`);
    }
});

bot.onText(/\/dungtinhieu (.+)/, (msg, match) => {
    try {
        const parts = match[1].split(',').map(p => p.trim().toLowerCase());
        if (parts.length < 3) return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è C√∫ ph√°p sai! V√≠ d·ª•: /dungtinhieu ada,usdt,5m');

        const [symbol, pair, timeframeInput] = parts;
        const timeframe = normalizeTimeframe(timeframeInput);

        if (!timeframe || !supportedTimeframes.includes(timeframe)) {
            return bot.sendMessage(msg.chat.id, `‚ö†Ô∏è Khung th·ªùi gian kh√¥ng h·ª£p l·ªá! H·ªó tr·ª£: ${supportedTimeframes.join(', ')}`);
        }

        const chatId = msg.chat.id;
        if (!autoWatchList.has(chatId)) {
            return bot.sendMessage(chatId, '‚ÑπÔ∏è B·∫°n ch∆∞a theo d√µi c·∫∑p n√†o.');
        }

        const watchList = autoWatchList.get(chatId);
        const idx = watchList.findIndex(w => w.symbol === symbol && w.pair === pair && w.timeframe === timeframe);

        if (idx !== -1) {
            watchList.splice(idx, 1);
            unsubscribeBinance(symbol, pair, timeframe);
            bot.sendMessage(chatId, `‚úÖ ƒê√£ d·ª´ng theo d√µi ${symbol.toUpperCase()}/${pair.toUpperCase()} (${timeframe})`);
        } else {
            bot.sendMessage(chatId, `‚ÑπÔ∏è B·∫°n ch∆∞a theo d√µi c·∫∑p ${symbol.toUpperCase()}/${pair.toUpperCase()} (${timeframe})!`);
        }
    } catch (error) {
        bot.sendMessage(msg.chat.id, `‚ùå L·ªói /dungtinhieu: ${error.message}`);
    }
});

bot.onText(/\/lichsu/, (msg) => {
    const chatId = msg.chat.id;
    db.all(
        `SELECT symbol, pair, timeframe, signal, confidence, timestamp FROM signal_history WHERE chatId = ? ORDER BY timestamp DESC LIMIT 10`,
        [chatId],
        (err, rows) => {
            if (err) {
                console.error('L·ªói truy v·∫•n l·ªãch s·ª≠:', err.message);
                return bot.sendMessage(chatId, '‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ t√≠n hi·ªáu.');
            }
            if (!rows || rows.length === 0) return bot.sendMessage(chatId, '‚ÑπÔ∏è Ch∆∞a c√≥ l·ªãch s·ª≠ t√≠n hi·ªáu n√†o.');
            const historyText = rows.map(row => {
                const date = new Date(row.timestamp).toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
                return `${row.symbol.toUpperCase()}/${row.pair.toUpperCase()} (${timeframes[row.timeframe]}): ${row.signal} (${row.confidence}%) - ${date}`;
            }).join('\n');
            bot.sendMessage(chatId, `üìú *L·ªäCH S·ª¨ T√çN HI·ªÜU (10 g·∫ßn nh·∫•t)*\n${historyText}`, { parse_mode: 'Markdown' });
        }
    );
});

bot.onText(/\/tradehistory/, (msg) => {
    const chatId = msg.chat.id;
    db.all(
        `SELECT symbol, pair, timeframe, signal, entry_price, exit_price, profit, timestamp 
         FROM signal_history 
         WHERE chatId = ? AND entry_price IS NOT NULL 
         ORDER BY timestamp DESC LIMIT 10`,
        [chatId],
        (err, rows) => {
            if (err) {
                console.error('L·ªói truy v·∫•n l·ªãch s·ª≠ giao d·ªãch:', err.message);
                return bot.sendMessage(chatId, '‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch.');
            }
            if (!rows || rows.length === 0) return bot.sendMessage(chatId, '‚ÑπÔ∏è Ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o.');

            const historyText = rows.map(row => {
                const date = new Date(row.timestamp).toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
                const profitText = row.profit !== null ? `${row.profit.toFixed(2)}%` : 'ƒêang ch·ªù';
                return `${row.symbol.toUpperCase()}/${row.pair.toUpperCase()} (${timeframes[row.timeframe]}): ${row.signal}\n- Entry: ${row.entry_price.toFixed(4)}, Exit: ${row.exit_price ? row.exit_price.toFixed(4) : 'N/A'}, Profit: ${profitText}\n- ${date}`;
            }).join('\n\n');
            bot.sendMessage(chatId, `üìú *L·ªäCH S·ª¨ GIAO D·ªäCH GI·∫¢ L·∫¨P (10 g·∫ßn nh·∫•t)*\n\n${historyText}`, { parse_mode: 'Markdown' });
        }
    );
});

bot.onText(/\/status/, (msg) => {
    try {
        const chatId = msg.chat.id;
        const memoryUsage = process.memoryUsage();
        const usedMemoryMB = memoryUsage.heapUsed / 1024 / 1024;

        if (!recentAccuracies || !trainingCounter || typeof enableSimulation === 'undefined' || !currentConfig) {
            throw new Error('Bi·∫øn c·∫ßn thi·∫øt ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.');
        }

        if (!Array.isArray(recentAccuracies)) recentAccuracies = [];
        if (!currentConfig || typeof currentConfig.windowSize === 'undefined' || typeof currentConfig.units === 'undefined' || typeof currentConfig.epochs === 'undefined') {
            throw new Error('C·∫•u h√¨nh m√¥ h√¨nh ch∆∞a h·ª£p l·ªá.');
        }

        const avgAcc = recentAccuracies.length > 0 ? recentAccuracies.reduce((sum, val) => sum + val, 0) / recentAccuracies.length : 0;
        const maxAcc = recentAccuracies.length > 0 ? Math.max(...recentAccuracies) : 0;
        const minAcc = recentAccuracies.length > 0 ? Math.min(...recentAccuracies) : 0;

        const statusMessage = `
üìä *Tr·∫°ng th√°i Bot*
- S·ªë l·∫ßn hu·∫•n luy·ªán: ${trainingCounter}
- ƒê·ªô ch√≠nh x√°c trung b√¨nh: ${(avgAcc * 100).toFixed(2)}\%
- ƒê·ªô ch√≠nh x√°c cao nh·∫•t: ${(maxAcc * 100).toFixed(2)}\%
- ƒê·ªô ch√≠nh x√°c th·∫•p nh·∫•t: ${(minAcc * 100).toFixed(2)}\%
- RAM: ${usedMemoryMB.toFixed(2)} MB
- Gi·∫£ l·∫≠p: ${enableSimulation ? 'ƒêang ch·∫°y' : 'ƒê√£ d·ª´ng'}
- C·∫•u h√¨nh m√¥ h√¨nh: WINDOW_SIZE=${currentConfig.windowSize}, Units=${currentConfig.units}, Epochs=${currentConfig.epochs}
        `.trim();

        console.log(`G·ª≠i statusMessage: ${statusMessage}`);
        fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - G·ª≠i statusMessage: ${statusMessage}\n`);
        bot.sendMessage(chatId, statusMessage, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('Chi ti·∫øt l·ªói:', error);
        fs.appendFileSync(BOT_LOG_PATH, `${new Date().toISOString()} - L·ªói: ${error.stack}\n`);
        bot.sendMessage(msg.chat.id, `‚ùå L·ªói tr·∫°ng th√°i: ${error.message}`);
    }
});

bot.onText(/\/trogiup/, (msg) => {
    const helpMessage = `
üìö *H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT GIAO D·ªäCH*
1. **?symbol,pair,timeframe** - Ph√¢n t√≠ch th·ªß c√¥ng. V√≠ d·ª•: ?ada,usdt,5m
2. **/tinhieu symbol,pair,timeframe** - B·∫≠t theo d√µi t·ª± ƒë·ªông. V√≠ d·ª•: /tinhieu ada,usdt,5m
3. **/dungtinhieu symbol,pair,timeframe** - D·ª´ng theo d√µi t·ª± ƒë·ªông. V√≠ d·ª•: /dungtinhieu ada,usdt,5m
4. **/lichsu** - Xem 10 t√≠n hi·ªáu g·∫ßn nh·∫•t.
5. **/tradehistory** - Xem 10 giao d·ªãch gi·∫£ l·∫≠p g·∫ßn nh·∫•t.
6. **/status** - Xem tr·∫°ng th√°i bot.
7. **/showindicators** v√† **/hideindicators** - B·∫≠t/t·∫Øt ch·ªâ s·ªë k·ªπ thu·∫≠t.
8. **/resettraining** - ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm hu·∫•n luy·ªán.
9. **/trogiup** - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y.
`;
    bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/showindicators/, async (msg) => {
    const chatId = msg.chat.id;
    setUserSettings(chatId, 1);
    bot.sendMessage(chatId, '‚úÖ ƒê√£ b·∫≠t hi·ªÉn th·ªã ch·ªâ s·ªë k·ªπ thu·∫≠t.');
});

bot.onText(/\/hideindicators/, async (msg) => {
    const chatId = msg.chat.id;
    setUserSettings(chatId, 0);
    bot.sendMessage(chatId, '‚úÖ ƒê√£ t·∫Øt hi·ªÉn th·ªã ch·ªâ s·ªë k·ªπ thu·∫≠t.');
});

bot.onText(/\/resettraining/, (msg) => {
    const chatId = msg.chat.id;
    trainingCounter = 0;
    shouldStopTraining = false;
    bot.sendMessage(chatId, '‚úÖ ƒê√£ ƒë·∫∑t l·∫°i b·ªô ƒë·∫øm hu·∫•n luy·ªán v√† tr·∫°ng th√°i d·ª´ng.');
    console.log(`‚úÖ ƒê√£ ƒë·∫∑t l·∫°i trainingCounter v·ªÅ 0 b·ªüi chat ${chatId}`);
});

function startAutoChecking() {
    const CHECK_INTERVAL = 1 * 60 * 1000;
    setInterval(() => {
        for (const [chatId, watchList] of autoWatchList) {
            watchList.forEach(async (config) => {
                try {
                    await checkAutoSignal(chatId, config);
                } catch (err) {
                    console.error(`‚ùå L·ªói checkAutoSignal: ${err.message}`);
                }
                await new Promise(resolve => setTimeout(resolve, 500));
            });
        }
    }, CHECK_INTERVAL);
}

async function checkAutoSignal(chatId, { symbol, pair, timeframe }, confidenceThreshold = 70) {
    const configKey = `${chatId}_${symbol}_${pair}_${timeframe}`;
    const now = Date.now();

    const lastSignal = signalBuffer.get(configKey);
    const { result, confidence, signalType, signalText, entryPrice, sl, tp } = await getCryptoAnalysis(symbol, pair, timeframe, chatId);

    if (confidence < confidenceThreshold) return;

    const df = await fetchKlines(symbol, pair, timeframe, 50);
    const atr = df ? computeATR(df) : 0.0001;
    const priceChangeThreshold = atr * 0.5;

    if (lastSignal && Math.abs((entryPrice - lastSignal.entryPrice) / lastSignal.entryPrice) < priceChangeThreshold) {
        console.log(`‚ö†Ô∏è Gi√° thay ƒë·ªïi kh√¥ng ƒë√°ng k·ªÉ (${(priceChangeThreshold * 100).toFixed(2)}%), b·ªè qua t√≠n hi·ªáu ${symbol}/${pair}.`);
        return;
    }

    if (lastSignal && now - lastSignal.timestamp < SIGNAL_COOLDOWN) {
        console.log(`‚ö†Ô∏è T√≠n hi·ªáu ${symbol}/${pair} b·ªã ch·∫∑n do cooldown.`);
        return;
    }

    bot.sendMessage(chatId, `üö® *T√çN HI·ªÜU ${symbol.toUpperCase()}/${pair.toUpperCase()} (${timeframes[timeframe]})* üö®\n${result}`, { parse_mode: 'Markdown' });
    signalBuffer.set(configKey, { result, signalText, timestamp: now, entryPrice });

    const { exitPrice: rawExitPrice, profit: rawProfit } = await simulateTrade(symbol, pair, timeframe, signalType, entryPrice, sl, tp, now);

    if (lastSignal && lastSignal.signalText === signalText) {
        console.log(`‚ö†Ô∏è T√≠n hi·ªáu ${symbol}/${pair} kh√¥ng thay ƒë·ªïi, kh√¥ng l∆∞u v√†o database.`);
        return;
    }

    // Ki·ªÉm tra v√† x·ª≠ l√Ω gi√° tr·ªã null
    const safeChatId = chatId ?? 0; // Kh√¥ng bao gi·ªù null, nh∆∞ng th√™m ƒë·ªÉ ch·∫Øc ch·∫Øn
    const safeSymbol = symbol ?? 'UNKNOWN';
    const safePair = pair ?? 'UNKNOWN';
    const safeTimeframe = timeframe ?? 'UNKNOWN';
    const safeSignal = signalType ?? 'UNKNOWN';
    const safeConfidence = confidence ?? 0;
    const safeTimestamp = now ?? Date.now();
    const safeEntryPrice = entryPrice ?? 0;
    const safeExitPrice = rawExitPrice ?? null; // ƒê·ªÉ null n·∫øu kh√¥ng c√≥ gi√° tho√°t
    const safeProfit = rawProfit ?? null; // ƒê·ªÉ null n·∫øu kh√¥ng c√≥ l·ª£i nhu·∫≠n

    // Ki·ªÉm tra c√°c gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c null
    if (!safeChatId || !safeSymbol || !safePair || !safeTimeframe || !safeSignal || safeConfidence === null || safeTimestamp === null || safeEntryPrice === null) {
        console.error(`‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá khi l∆∞u t√≠n hi·ªáu ${safeSymbol}/${safePair}: `, {
            chatId: safeChatId, symbol: safeSymbol, pair: safePair, timeframe: safeTimeframe, signal: safeSignal,
            confidence: safeConfidence, timestamp: safeTimestamp, entryPrice: safeEntryPrice
        });
        return
    }

    db.run(
        `INSERT INTO signal_history (chatId, symbol, pair, timeframe, signal, confidence, timestamp, entry_price, exit_price, profit)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [chatId, symbol, pair, timeframe, signalType, confidence, now, entryPrice, rawExitPrice, rawProfit],
        (err) => {
            if (err) {
                console.error(`‚ùå L·ªói l∆∞u t√≠n hi·ªáu ${symbol}/${pair} v√†o database: ${err.message}`);
                fs.appendFileSync('bot_error.log', `${new Date().toISOString()} - L·ªói SQLite: ${err.message}\n`);
            } else {
                console.log(`‚úÖ L∆∞u t√≠n hi·ªáu ${symbol}/${pair} th√†nh c√¥ng.`);
            }
        }
    );

}

// =====================
// DYNAMIC TRAINING CONTROL
// =====================
function dynamicTrainingControl() {
    if (recentAccuracies.length < 50) return;
    const avgAcc = recentAccuracies.reduce((sum, val) => sum + val, 0) / recentAccuracies.length;
    const maxAcc = Math.max(...recentAccuracies);
    const minAcc = Math.min(...recentAccuracies);

    if (avgAcc > 0.85 && (maxAcc - minAcc) < 0.05) {
        if (enableSimulation) {
            enableSimulation = false;
            shouldStopTraining = false; // Th√™m d√≤ng n√†y n·∫øu b·∫°n mu·ªën ƒë·∫∑t l·∫°i tr·∫°ng th√°i d·ª´ng
            trainingCounter = 0; // ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm khi m√¥ h√¨nh ·ªïn ƒë·ªãnh
            console.log("‚úÖ Dynamic Training Control: M√¥ h√¨nh ·ªïn ƒë·ªãnh, d·ª´ng gi·∫£ l·∫≠p v√† ƒë·∫∑t l·∫°i trainingCounter.");
            if (adminChatId) {
                bot.sendMessage(adminChatId, `‚úÖ *M√¥ h√¨nh ƒë√£ ·ªïn ƒë·ªãnh* | Accuracy: ${(avgAcc * 100).toFixed(2)}% | ƒê√£ d·ª´ng gi·∫£ l·∫≠p v√† ƒë·∫∑t l·∫°i b·ªô ƒë·∫øm hu·∫•n luy·ªán.`, { parse_mode: 'Markdown' });
            }
        }
    } else {
        if (!enableSimulation) {
            enableSimulation = true;
            console.log("‚ö° Dynamic Training Control: Hi·ªáu su·∫•t ch∆∞a ·ªïn ƒë·ªãnh, k√≠ch ho·∫°t l·∫°i gi·∫£ l·∫≠p.");
            simulateRealTimeForConfigs(1000);
        } else {
            console.log("‚ö° Dynamic Training Control: Hi·ªáu su·∫•t ch∆∞a ·ªïn ƒë·ªãnh, ti·∫øp t·ª•c gi·∫£ l·∫≠p.");
            simulateRealTimeForConfigs(1000);
        }
    }
}

// =====================
// KH·ªûI ƒê·ªòNG BOT
// =====================
(async () => {
    await initializeModel();
    await trainModelWithMultiplePairs();
    startAutoChecking();
    await simulateRealTimeForConfigs(1000);
    setInterval(dynamicTrainingControl, 10 * 60 * 1000);
    setInterval(() => {
        console.log("‚è≥ ƒêang ki·ªÉm tra v√† t·ªëi ∆∞u m√¥ h√¨nh...");
        optimizeModel();
    }, 1 * 60 * 60 * 1000); // 5 gi·ªù
})();
